{
  "_args": [
    [
      {
        "raw": "react-loader",
        "scope": null,
        "escapedName": "react-loader",
        "name": "react-loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/clintmcmahon/Code/TapInGuide/matchdayclient"
    ]
  ],
  "_from": "react-loader@latest",
  "_id": "react-loader@2.4.0",
  "_inCache": true,
  "_location": "/react-loader",
  "_nodeVersion": "5.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-loader-2.4.0.tgz_1460492156169_0.8679711862932891"
  },
  "_npmUser": {
    "name": "quickleft",
    "email": "accounting@quickleft.com"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-loader",
    "scope": null,
    "escapedName": "react-loader",
    "name": "react-loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-loader/-/react-loader-2.4.0.tgz",
  "_shasum": "35c5eb345d56a2e7204ecd26d5c7f225d1a63f92",
  "_shrinkwrap": null,
  "_spec": "react-loader",
  "_where": "/Users/clintmcmahon/Code/TapInGuide/matchdayclient",
  "author": {
    "name": "Matt Huggins",
    "email": "mhuggins@quickleft.com",
    "url": "http://quickleft.com"
  },
  "bugs": {
    "url": "https://github.com/quickleft/react-loader/issues"
  },
  "dependencies": {
    "spin.js": "2.x"
  },
  "description": "React component that displays a spinner via spin.js until your component is loaded",
  "devDependencies": {
    "browserify": "^5.9.1",
    "chai": "^1.9.1",
    "es5-shim": "^4.0.1",
    "mocha": "^2.4.5",
    "mocha-phantomjs": "^4.0.2",
    "react": "^15.0.0",
    "react-dom": "^15.0.0",
    "react-tools": "^0.13.3",
    "reactify": "^1.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "35c5eb345d56a2e7204ecd26d5c7f225d1a63f92",
    "tarball": "https://registry.npmjs.org/react-loader/-/react-loader-2.4.0.tgz"
  },
  "gitHead": "c90fd04172ec027ef24bb8ddddcc7faaf0d14f45",
  "homepage": "https://github.com/quickleft/react-loader",
  "keywords": [
    "react",
    "component",
    "react-component",
    "loader",
    "spinner",
    "spin",
    "spinjs",
    "spin.js"
  ],
  "license": "MIT",
  "main": "lib/react-loader.js",
  "maintainers": [
    {
      "name": "quickleft",
      "email": "accounting@quickleft.com"
    }
  ],
  "name": "react-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0",
    "react-dom": "^0.14.0 || ^15.0.0"
  },
  "readme": "# react-loader [![Circle CI](https://circleci.com/gh/quickleft/react-loader.svg?style=svg)](https://circleci.com/gh/quickleft/react-loader)\n\nreact-loader provides your [React.js](http://facebook.github.io/react/)\ncomponent a simple mechanism for rendering a loading spinner (via\n[spin.js](http://fgnass.github.io/spin.js/)) while data is loading, such as an\nasynchronous request to load data for a view.\n\n> Important Note: The 2.x branch is compatible with React 1.4 and higher. If\n> you're working with an older version of React, please use the 1.x branch.\n\n## Installation\n\nreact-loader is available through both [Bower](http://bower.io/) and\n[npm](https://www.npmjs.org/) via:\n\n    npm install react-loader\n\nor:\n\n    bower install react-loader\n\nBe sure to include the `--save` option to add this as a dependency in your\napplication's `package.json` or `bower.json` file.\n\n## Usage\n\nWrap the Loader component around your loading content within your React\ncomponent's `render` function.\n\n```jsx\n/** @jsx React.DOM */\nvar Loader = require('react-loader');\n\nvar MyComponent = React.createClass({\n  getInitialState: function () {\n    return { loaded: false, profile: null };\n  },\n\n  componentDidMount: function () {\n    new Profile({ id: this.props.id }).fetch({\n      success: this.onSuccess,\n      error: this.onError\n    })\n  },\n\n  onSuccess: function (profile) {\n    this.setState({ profile: profile, loaded: true });\n  },\n\n  onError: function (err) {\n    // error handling goes here\n  },\n\n  render: function () {\n    return (\n      <Container>\n        <Header>My Profile</Header>\n            <Loader loaded={this.state.loaded}>\n              <Profile model={this.state.profile} />\n            </Loader>\n      </Container>\n    );\n  }\n});\n```\n\n### Options\n\nOptions can be passed to the Loader component as properties.  The Loader accepts\na `loaded` boolean that specified whether the spinner or content should be\ndisplayed, defaulting to `false`.  It also accepts a `component` property to\nspecify the DOM node, defaulting to `\"div\"`.  Additionally, all options\navailable to spin.js are available to this component in two ways.\n\n1. First, you can pass each option onto the loader as individual properties:\n\n```jsx\n<Loader loaded={false} lines={13} length={20} width={10} radius={30}\n    corners={1} rotate={0} direction={1} color=\"#000\" speed={1}\n    trail={60} shadow={false} hwaccel={false} className=\"spinner\"\n    zIndex={2e9} top=\"50%\" left=\"50%\" scale={1.00}\n    loadedClassName=\"loadedContent\" />\n```\n\n2. Alternatively, you can use supply an object using the `options` key:\n\n```jsx\nvar options = {\n    lines: 13,\n    length: 20,\n    width: 10,\n    radius: 30,\n    corners: 1,\n    rotate: 0,\n    direction: 1,\n    color: '#000',\n    speed: 1,\n    trail: 60,\n    shadow: false,\n    hwaccel: false,\n    zIndex: 2e9,\n    top: '50%',\n    left: '50%',\n    scale: 1.00\n};\n\n<Loader loaded={false} options={options} className=\"spinner\" />\n```\n\n### Styling\n\nThe loader is rendered inside a DIV element (unless otherwise specified via the\n`component` property mentioned earlier) with class \"loader\".  A simple solution\nfor rendering the spinner on the center of your screen would be to use some CSS\nlike the following:\n\n```css\n.loader {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: white;\n  z-index: 9999;\n}\n```\n\nOnce the content is loaded and the spinner is removed, the DOM node is given a\nclass of \"loadedContent\" (which is customizable by specifying the\n`loadedClassName` property).\n\n## Contributing\n\nTo contribute:\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Add your changes to the `lib/react-loader.jsx` file along with associated\n   tests under `test/spec/react-loader-test.js`.\n4. Build any JSX changes to JS (`npm run build`), and run tests (`npm test`).\n5. Commit your changes (`git commit -am 'Added some feature'`)\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create new Pull Request\n\n## License\n\nreact-loader is released under the [MIT License](http://opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/quickleft/react-loader.git"
  },
  "scripts": {
    "build": "jsx -x jsx lib lib",
    "test": "npm run build && npm run test-prepare && npm run test-run",
    "test-prepare": "browserify -e test/spec/suite.js -t reactify -o test/bundle.js",
    "test-run": "mocha-phantomjs test/index.html"
  },
  "version": "2.4.0"
}
